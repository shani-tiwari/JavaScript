
                //  ********  For Better and Desired results, run in browser ðŸ’œ.  **********


//1.  function to check whether tha input is an 'array' or not. 

        function chk(input){
            //  return  Array.isArray(input);  // method , T/F
                    // OR.......
                 // if you  r making a array , it's always instance ( connected / linked ) to 'Array'. 
              return input instanceof Array;
           }
        //let i = prompt('enter numbers : ')

        console.log(chk(1));        // F
        console.log(chk({}));       // F
        console.log(chk([]));       // T
        console.log(chk([1, 2, 3]));// T
        console.log(chk(true));     // F
        console.log(chk(1, 2));     // F

 // 2. clone an array. 
 
        function cloning(ar){
           // return cloned = [...i];  // spread operator ( spread the values of the array ) / create referance, not contain real copy of array. 
             /// OR........
             l = ar.length;
             console.log(l);
             for (let i = 0; i < l; i++) {
                const element = ar[i];
                console.log(element);
             }
        }
        //  console.log(cloning([1, 2, 3]));
        //  console.log(cloning([1, 2, 3, [4, 5]]));
                    // only calling for second..
            cloning([1, 2, 3]);
            cloning([1, 2, 3, 4, 5]);
            cloning([1, 2, [3, 4, 5]]);  // prints in form of numbers (in diff. lines)


// 3. get the first element of array, and if you pass a number with it, it should return those no. of elements. 

        function first(arr, no = 1){   // default parameter ( 1 ) , used when no value is specified for that variable. 
                // return console.log(arr);  -  undefined ( default value ) when no values are passed. 
                //console.log(no);
                var res = [];        // empty array. 
                for (let i = 0; i < no; i++) {
                      res.push(arr[i]);
                }
                return res;

        }
        console.log(first([1, 2, 3] , 2));
        console.log(first([1, 2, 3] ));
        console.log(first([1, 2, 3] , 3));
        console.log(first([1, 2, 3] , -3));   // blank

// 4. join all elements of the following array into a string . 

        function joiner(inp){
                return inp.join(" - @ - ");  //seprating each element by specified sign.. 
        }
        console.log(joiner(["apple", "cat", "mars", "falana"]) );
        console.log(joiner([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) );

// 5.  7 ways to create an object ...
        // i. 
        var a = {};  // object literal 
        console.log(typeof a);

        // ii
        let z = Object.create(null); // object create method
        console.log(typeof z);

       // iii
       function fun(){
        this.name = " shani ";
        console.log(typeof this.name);  // string
        console.log(typeof name);  // undefined
        console.log(typeof fun);  // function
        }
          // like this
                // class a {
                // constructor() {
                //         this.name = " shani ";
                //         }
                // }
        new fun(); // new - keyword makes blank object. 
         //  whenever we call a fnction with nre kw creates a imaginary object ( {} ), put that onject in place of this ( {}.name ),
        // and that value placed in that object. 

        // iv
        class ab {
                constructor(){}
                        a = 12;
                
        }
        var ans = new ab ();
        console.log(ans);
        console.log(typeof ans);  // object
        console.log(typeof ab);  // function -- class is just the wrapping of function, thet r not real classes. 

// 6.  Higher Order Function ( hof ), a functon that accepts/return another function as a parameter. ( ex - map, filter, forEach)
        function abcd (inp){
                var a = 12;
                inp();  //  not accessible
        }
        abcd ( function(){ console.log(a);})

        function func(inp){
                return function(inp2) { return inp+inp2;}
        }
        console.log(func(12)(10));  // 22

// 7. this keyword - value of this depends on where we r using it, By default ( window ).

        // in  global context - value  window
           console.log(this);   //  window {}

        // function - window
        function chk(){
                console.log(this);  // window
        }
        chk();

        // method - object
        var o = {
                name: "shani",
                age: function(){
                        console.log(this);   // object
                }
        }
        o.age();
        // function ES5 inside method - window
        // ES6 """" - object

// 8. call - help us to decide value of this at runtime. 
        var obj = {};

        function xyz(a, b, c){
                console.log(this, a, b, c);
        }
        xyz();            // this - window
        xyz.call(12);     // this - Number
        xyz.call(obj);    // this - object

        xyz.call(obj, 1, 2, 3);    // this - object and if oyur function takes any parameter.
        
// 9. apply
           // or we can use apply in that place
           xyz.apply(obj, [1, 2, 3]);  // takes only two value( this value, parametes value as a array).

// 10 . bind ( used most in react )
        var l = {name:"shani"};
        function Binding(){
                console.log(this);
        }
        var res = Binding.bind(obj); // bind doesn't runs a function. function Binding binded with the l(object) and return it. 
        res(); // runs a function


//  11. forEach - loop, works on array, it's a higher order function ( technically method ), it takes a function as a parameter.       
                //1.
        // var a = [1, 2, 3, 4, 5];
        // var sum = 0;
        // a.forEach(function (val) {
        //     // console.log(val);
        //     // console.log(val+2); 
        //     // console.log(" Hello " + val); 

        //     if ( val <= 2) {
        //         console.log(val);  // 1, 2
        //     }

        //     sum += val;

        // })
        // console.log(sum);    // 15 

                //2.
        // var ar = [1, 2, '3', 4, 5, true, 2.11];
        // var s = 0;
        // ar.forEach(function(val){
        //     if (typeof val === 'number') {   // only add if it's integer. 
        //             s += val;
        //     }
        // })
        // console.log(s);  // 12

                //3.
        // var arr = [];
        // for (var i = 0; i < 10; i++) {
        //     arr.push( function(){
        //             setTimeout(function(){
        //                 console.log(i);
        //             }, 1000)
        //       })
            
        // }  // array gets 10 functions on it's 10 index's.
        // for (var i = 0; i < 10; i++) {
        //     arr[i]();  // calling of every index function. 
        // }
        // ********  with let i - 0-9   ,,,    with var i - 10 10 10 10 10 10 10 10 10 10    --  coz of scopes. 



// 12.  sync vs async, callback
        // js first runs sync code than async.
                // Synchronous ->  code runs line by line & if any of line is not resolved, code execution won't go to next line.  
                // asynchronous ->  waits until sync code isn't finished, when finished then async code execution starts. 
                               // it can have some delay. function is given to know that our async code ran
                               // ( it'll run the code inside callback function after a specified time )
                // Callback ->  function, runs in async code, when a normal function used with async code, it's known as callback function. 

   // all sync code goes to 'main stack' line by line & async code in side stack, that waits for the completion of sync code, after that it'll 
   // goes to main stack and get executed .  

                // sync code
        //     console.log(" 1 ");
        //     console.log(" 2 ");

        //     setTimeout(function(){    // setTimeout is also a higher Order Function
        //         // print after 5  ,  async code
        //         console.log(' 3 ');
        //         console.log(' 4 ');
        //     }, 2000)  // after 2 seconds( 2000 miliSeconds )
        //                 // sync code
        //     console.log(' 5 ');



 // 13.  map() - perform operation on every element of array and place result in new array, return something is mandatory.( anything that return 
                // by map saved in imaginary array and after the map ends we have to save it in something t use it. ) 
            //1.
        //     var a = [1, 2, 3, 4];
        //      var ans = a.map(function(){
        //                 return 'hello!'
        //         } )
        //      console.log(ans);
                //2.
        //      var arr = ["guava", "banana", "papaya", "apple", "a"];
        //     var ans = arr.map(function(val){
        //                 if (val.length === 5) return `<p>${val}</p>`;
        //                 else return `<span> ${val}</span>`
        //     })
        //     console.log(ans);
                //3.
        //     var arr = [   // array of objects
        //         {name: 'harsh', age: 24},
        //         {name: 'harshita', age: 23},
        //         {name: 'rachi', age: 25},
        //       ]
        //     var res =  arr.map(function(val){
        //         return val.name;
        //     })
        //     console.log(res);


// 14. filter() - same as map structure, but returns boolean only or something that can converted into boolean . 
                // but it saves values not boolean. 
          //1.
        // var a = [1, 2, 3, 4, 5];
        // var ans = a.filter(function(val){
        //         if ( val % 2 === 0 ) {
        //                 return true;
        //         } 
        // })
        // console.log(ans);

           //2.
        // var ar = ['harsh', 'amit', 'khushi', 'sanaya'];
        //  var ans = ar.filter(function(val){
        //         //return val.includes('a');  // return those contain 'a'
        //         return !val.includes('a');  // return those not contain 'a'
        // })
        // console.log(ans);

          //3.
        // var a = ['harhs', 'abhay', 'anushka', 'vishakha', 'shani'];
        // var res = a.filter(function(val){
        //         if (val.split('a').length <= 2) return true; // print those contain only one 'a'.
        // })
        // console.log(res);


// 15 . iife - immediately invoked funciton, is a function which is immediately invoked as it's created. 
         function abcd(){}// function statement
        // function(){}       // anonymous function
        (function(){})     // expression
        (function(){}) (); // iife

        (function(){
                console.log("hello");  // hello - in console.
        }) ();
        
        //  used to create private variables.  ( Why used )
        var a = 12;   // a is accessible in console & also can be updated. 
        (function(){
                var b = 10;  // Referenceerror: b is not defined
                // accessed only inside the function, can't outside. 
             // so we can write the code to change and access and then return that code to outside. 
        }) ();

        var ans = (function(){
                var a = 12;
                 return {
                        // to get a value to print or for calculaiton. 
                getter: function () {
                        console.log(a);
                },  // to set a value to variable. 
                setter: function(val){
                        a = val ;
                }
             }
        }) () ;
        // ans have getter & setter ( in console )
        ans.setter(32);
        ans.getter();

// 16. Promises - ( async work ) somehting to do but it completes after somme time 

                setTimeout(function(){
                        var num = Math.floor(Math.random()*10);
                        if ( num > 5) console.log("hello"); 
                        else console.log("hey");
                }, 5000)

                // what if , if it can't generate. like task can't be done by some reason, so Promises used - it's say, it'll be done after some time but we don't know
                        // it'll br successful or not. 
                // takes a function that have work/code to be done & accept two arguments that shows work will done or not ( resolve, reject )( that order mandatory )
                       
                        new Promise(function(hoga, nhiHoga){
                            var num =  Math.floor(Math.random()*10);
                            if (num < 5) return hoga();
                            else return nhiHoga(); 
                        })    // output
                        // [[Prototype]] :  Promise
                        // [[PromiseState]] :  "rejected"
                        // [[PromiseResult]] :  undefined   --  bacause it return resultant that have to be stored .

                         var p = new Promise(function(hoga, nhiHoga){
                                var num =  Math.floor(Math.random()*10);
                                if (num < 8) {return hoga();}
                                // given Uncaught ( in promise ) error when promise is rejected, condition isn't fulfilled. 
                                else {return nhiHoga(); }
                                })
                        console.log(p); // undefined
                                 // output
                        // [[Prototype]] :  Promise
                        // [[PromiseState]] :  "fulfilled"  ( condition satisfied )
                        // [[PromiseResult]] :  undefined   --  bacause it doesnt contains any message yet. 

                        // Now, * .then(), .catch() - used to print resolve ,reject messages. 
                        // inside Promise any of one is ran out of both(resolve, reject)
                        // -> when resolve() run's than the resultant answer run on the basis of .then() otherwise  on the basis of .catch()

                        var p = new Promise(function(res, rej){
                               if (true) {
                                        return res();
                               }else{
                                return rej();
                               }
                        }) // then and catch always takes functions. 
                        p.then(function(){
                                console.log("hey");
                        }).catch(function(){
                                console.log("catched");
                        })


                        var pro =  new Promise(function(res, rej){
                                setTimeout(function(){
                                        return res();  // after 3 seconds - fulfilled. 
                                }, 2000)
                                // pro will be in pending state to 2 seconds. 
                        });


                                          // series of works,                                                                                                                                                                                                      

                        var p1 = new Promise(function(res, rej){
                                setTimeout(function () {    
                                        return res("ghar se nikalte hiiii....");
                                }, 2000);
                        })
                         var p2 = p1.then(function(message){  // message - ghar se nikalte hiii
                                console.log(message);

                                // if first task is successfully completed then only it executes...
                                return new Promise(function(res, rej){  // returnong it, it'll goes to p2 
                                        return res("kuch dur chalte hi...");
                                })
                        }) 
                         var p3 = p2.then(function(msg){
                                console.log(msg);

                                return new Promise( function(res, rej){
                                        return res("raste mai hai uska ghar ....");
                                })
                        })
                        p3.then(function(msg){
                                console.log(msg);

                                return new Promise( function(res, rej){
                                        return res(" pehli dafa maine,,,, jab usko dekha tha... ");
                                })
                        }) 


                                //  user enter's number & if it's less then 5 then resolve otherwise reject. 

                        let p = prompt('enter  a number from 1-9 : ');  /// it gives us string,
                        console.log( typeof p);
                         //p = parseInt(p);       // so we have to convert it into a number.
                         // p = Number(p);       // converts to number
                         p = +p;   // same
                         console.log(typeof p);

                        var pr = new Promise(function(res, rej){
                                if ( p < 5) {
                                        return res(" number less than 5");
                                }else{
                                        return rej();
                                }
                        })
                        pr.then(function(msg){
                                console.log(msg);
                        }).catch(function(){
                                console.log("number is greater. ");
                        })

// 17.  classes -  saancha, make instances, 

                        class saancha {
                                // saancha(class) decide how something looks like, and constructor used to give default data
                                // if you made a class, it must have a constructor function ( runs very first )
                                // and instead of var,let use this keyword
                                constructor(){
                                        this.width = 2;
                                        this.height = 4;
                                        this.price = 5;
                                }
                        }
                        // new -> make imaginary object and place that object in every this. 
                        var v = new saancha();
                        console.log(v);


                        class bottle {
                                // more efficient than other methods. 
                                constructor(){
                                        this.radius = 3;
                                        this.color = "transperant";
                                        this.sipper = false;
                                        this.brand = "cello";
                                }
                        }
                        var bottle1 = new bottle();
                        console.log(bottle1);


                        // dynamic values
                        class thaali{
                                constructor(sweet){
                                        this.sweet = sweet; 
                                }
                        }
                        var first = new thaali(" gulab jamun ");
                        var second = new thaali(" ras malai ");
                        var third = new thaali(" kheer ");
                        console.log(first, second, third);
                        first.sweet = "kaaju katli" ;
                        console.log(first);



// 18. check members frequencies in an array. 

                        a = ['a', 12, 'a', 12, 'abc', 'a', 'abc', 14, 14, 'me', 'a'];
                        obj = {};
                        a.forEach(function(elem){    //a.forEach(elem => {
                                obj.hasOwnProperty(elem) ? obj[elem]++ : obj[elem] = 1;
                        });
                        console.log(obj);
                        
 // 19. duplicate values in an array.
                        
                a = ['a', 12, 'a', 12, 'abc', 14, 'me', 'a'];
                var ob = {};
                a.forEach(function(val){
                        ob.hasOwnProperty(val) ? ob[val]++ : ob[val] = 1
                })
                // forin loop for objects
                for (var i in ob) {
                        //console.log(i);  // a, 12, a, 12, abc, 14, me, a
                        if (ob[i] > 1) {
                                console.log(i); // print duplicate elements. 
                        }
                }

// 20 . program which accept a number AS input ans insert (-),between each teo even numbers, Ex- 025468 = 0-254-6-6-8

                var a = 56526634;
                var s = a.toString();
                for (let i = 0; i < s.length; i++) {
                        if ( Number(s[i-1]) % 2 === 0 && Number(s[i] % 2 === 0)) {
                              s =   s.substring(0, i) + '-' + s.substring(i, s.length);
                        }
                } 
                console.log(s);


                // eight

// 21. invert a string. 

                function stringConvert(s){
                       var str =  s.split("").map(function(c){  // return array of char
                                if(c.charCodeAt()>90) {
                                        return c.toUpperCase();
                                }  //  for small case character
                                else{
                                        //for upper case character
                                        return c.toLowerCase();
                                }
                        })
                        return str.join("");  // to convert it in a string
                }
               var inverted = stringConvert("the Quick BRown fOx is droWnIng In thE WeLL");
                console.log(inverted);

// 22. print element of the following array. 

                var a = [[1, 2, 3, 3], 
                         [4, 5, 6, 1],
                         [7, 8, 9, 0]];
                for (let i = 0; i < a.length; i++) {
                        console.log(`Printing row ${i+1}`);
                        for (let j = 0; j < a[i].length; j++) {
                                console.log(a[i][j]);
                        }
                }

// 23.  binary search 
                var ar = [1, 4, 6, 8, 34, 56 ,78 , 90];
                var search = 78;
                var start = 0;  /// never greater then end idx. 
                var end = a.length-1;
                var mid = Math.floor(( start+end )/2);
                var flag = -1;
                while (start <= end) {
                        if (search === a[mid]) {
                                flag = mid;
                                //console.log("mil gaya ");
                                break;
                        }
                        else if(search > a[mid]){
                                start = mid+1;
                                mid = Math.floor(( start+end )/2);
                        }else if(search < a[mid]){
                                end = mid-1;
                                mid = Math.floor(( start+end )/2);
                        }
                }
                if (flag === -1) {
                        console.log("nahi mili");
                }else{
                        console.log("mil gai");
                }

// 24.  compute sum of the indivudual index value from the given arrays. 

                var a= [1, 2, 3, 4, 5 ];
                var b= [12, 5 , 45, 34 , 78, ,3, 4];

                for (let i = 0; i < a.length; i++) {
                       console.log(a[i] + b[i]);
                }


                // nine

// 25. temproral dead zone - when variable made it's in tdz till it's not get initialize/declare.

                console.log(a);
                var a = 12;  // undefined 
                console.log(tdz);
                let tdz = 16;  // ReferenceError - not defined
                console.log(err);  // undefined
                var err;
                console.log(err2);  // ReferanceError
                let err2;

                
//  26.  Currying - when we have a function that takes more then one parameters , than break the function into
                // multiple functions , and every function return new function and new functoin uses 
                // parameters of old ( previous ) functions. 

                        // normal
                function cal(a, b) { 
                    console.log(a+b);
                }
                cal(12, 133);

                     // currying
                function parent(a) {
                        return function child (b) {
                                return (a+b);  // using params of ourself and parent.
                        }
                }
                var ans = parent(12); // it contains a function (child) return by parent
                var ans2 = ans(133);  // running child function
                console.log(ans2);

// 27. Pure functions -  function that never changes value of global variable
                        // and every time output is same when same argument is given. 
                
                 var global = 12;
                function abcd(a){
                        console.log(a+3);
                }

                function abcd2(){
                        global++;  // not a pure function
                }

                function abcd3(){
                       console.log( Math.random()*a);  // impure
                }


                          //   25 Mind Blowing Questions...............

// 1.  reverse a string..
                function rev(str){
                        return str.split("").reverse().join("");
                        // spliting on no basis so it makes a array of each seprated characters,
                        // and then reverse it , and join on the basis of nothing.
                }
                console.log(rev( " it's shani Tiwari here! " ));  
                console.log(rev( " it's shani Tiwari here!"));

// 2. check object is array or not.
                function chk(val){
                        // can.t use typeOf method beacuse array is also a object type in js. 
                      return  Array.isArray(val);
                }
                console.log(chk([]));
                console.log(chk({}));
                console.log(chk(""));

// 3. empty an array, don't make new array, don't loop through to pop variables.
                var arr = [1, 2, 3, 4, 5];
                console.log(arr);
                console.log(arr.length);
                arr.length = 0;
                console.log(arr.length);
                console.log(arr);

// 4.  check it's integer or not. 
                var a = 12;
                if ( a % 1 === 0) {
                        console.log('integer');
                }else{
                        console.log("not integer");
                }

 // 5. duplicate element - [1,2,3,4,5] - [1,2,3,4,5,1,2,3,4,5]
                function ab(arr){
                     //   return arr + arr;  // 1,2,31,2,3
                    // return arr + "," + arr;  // 1,2,3,1,2,3
                    return arr.concat(arr);
                }
                console.log(ab([1, 2, 3]));

// 6.  reverse a number. 
                function reverseNo(no){
                // convert in a string, split, reverse, join, convert in a number.
                 //  return Number(no.toString().split("").reverse().join(""));
                        // OR 
                        var rev = 0;
                while (no > 0) {
                        // mod 10 give us a last digit and devide 10 gices us a remaining part of a number.
                        
                        var rem = no  % 10;
                        rev = rev*10+rem;
                        no = Math.floor(no/10);
                }
                return rev;
                
                }
                console.log(reverseNo(123));
                console.log(reverseNo(6735367));

// 7. string is palindrome is not.    
                function strchk(s){
                        var rev = s.split("").reverse().join("");
                        // if (rev === s) {
                        //         return true;
                        // }
                        // else{
                        //         return false;
                        // }
                        return (rev === s) ? true : false;
                }
                console.log(strchk("looop"));
                console.log(strchk("loool"));
                console.log(strchk("pooop"));

// 8 . return a string letters in a alphabatical order. 
                function alpha(s){
                        // split(makes array by seprating each character) , so we can sort the array,
                        // and then convert it in a string  by toString().
                        return s.split("").sort().toString();
                }
                console.log(alpha("cba"));

// 9. convert first letter of each word in uppercase in a string 
                function capitalize(s){
                     //   return s.split(" ").toUpperCase.join(" ");
                     var all = s.split(" ").map(function (word){
                                word.charAt(0).toUpperCase()+word.substring(1);
                     })
                     return all.join(" ");

                }
                console.log(capitalize("shani tiwari"));


 //  100 Questions................

 // 1. What is JS , role of js engine ?
 // ans -  programming language for converting static web pages to dynamic. Every Browser has a js engine (ex.- chrome = v8 ). JS engine is a program present 
 // in web browser that executes JS code. 

 // 2. client side and server side. 
 //ans - computers/laptop/tab/phone/SW/App that requests & consumes of resrc of a server.  |  device/computer/sw/that provide services/resrc or function to clients.

 // 3. scope ?
 // ans -  define where variable r defined & where can be accessed. 

 // 4. type of variable in js when it's declared without using var, let, const ?
 // ans - "var" is implicit type of variable. 

 // 5. Hoisting in JS ?
 // ans - it's a js behaviour where function & variable declaration r moved to top of their respective scopes during Compilation phase. 
        // function hoisting
        myfun();
        function myfun(){
            console.log("hello!");
        }
        // Variale hoisting
            x = 10;
            console.log(x);
            var x ;  //  but let/const didn't allow it. 

// 6. JSON ?
// ans -  JS Object Notation , lightweight data interchange format , consist sof key-value Pairs. 

// 7. Primitive vs Non-Primitive
// ans - primitive - Number/String/Boolean/Undefined/Null , simple, one datatype can hold only single value, immutable, managed by js engine inside browser. 
        // non-primitive - Object/Array/Function/RegExp/Date, complex,  can hold multiple values & methods, mutable

// 8. Null vs Undefined ?
// ans - variable is declared & not initialized then auto it's value is undefined. Used when we don't have a value right now
        // but it'll be get after some logic or operation. 
        var unde ;
        console.log(unde);
        // intentially assigned a null value. Used when u r sure u don't have any value for particular variable. 
        var nu = null;
        console.log(nu);

// 9. typeof operaator ?
// ans - used to validate the data received from external src(api). 

// 10. type coercion ?
// ans - auto conversion of values fron one datatype to another during certain operations or comparisons. 
        // Used - i) during string & number concatation
        //       ii) whike using comparison operators. 
        str = "122"; no = 500; boo = true; n = null;
        console.log(str+no);  // 122500 - auto conversion from number to string. 
        console.log(no+str);  // 500122
        console.log(no+boo);  // 501
        console.log(no+n);  // 500

// 11. Operator Precedence 
// ans - BODMAS(brackets,order,div,mul,add,sub) higher precendence will evaluated first. 

// 12. Unary / Binary / Ternary Operator
// ans -   Unary                Binary                          Ternary
        // var a = 13;          x = 12, y = 78;                 res = ( condition ) ? 'yes' : 'no';
        // var b = -a;`         s = x + y;                      clg( res );
        // console.log(b);      clg( s );

// 13. Short Circuit Evaluation
// ans -    logical and                         logical or     
      // res = false && anyFun();       res = true || fun();     // in both cases second conditon didn't get checked. 
      // clg( res );                    clg( res );

// 14. == & ===
// ans - Loose Equality( == )  --  checks equality after performing type coercion
                // clg ( 1 == '1');    // true
                // clg ( true == 1);   // true
    // Strict Equality( === )  --  checks equality wihtout performing type coercion
                // clg ( '1' == 1);   // false
                // clg ( true == 1);   // false

// 15. Spread vs Rest Operator ?
// ans- Spread operator -> expand or spread elements from an iterable (array,string,object) into individual element. 
        // Used --> copy array, merge, passing multiple args to a function. 
        // arr = [1, 2, 3];   clg(...arr);   // 1, 2, 3
      //  Rest oparator ->  used in function para to collect all remaining args into an array. 
        //  function myfun(first, second, ...rest_arg){ clg(first, second); // 1, 2   clg(restarg);   // 3 }

                                        // ARRAY **************
                                        
// 16. Array ? how to get, add & remove element ?
// ans - allow to store multiple data in one variable, structure the data 
        //    GET - indexOf(), find(only for first elem), filter(for all elem), *slice(subset of ary, first to end idx(end not included)).
        //    ADD - Push(modify ary by adding giving elem), concat(new ary).
        // REMOVE - Pop(remove last elem), shift(first elem remove), *splice(add, remove, replace).
        // MODIFY - map(new modified ary), forEach(perform task & print neither return anything nor modifies).
        //  Other - join(), length, sort(), reverse(), reduce(), some(), every().

// 17. Array Destructuirng
// ans - allow u to extract elements from an array & assign them to individual variables in a single statement ( ES6 ).
        fruit = ['apple', 'papaya', 'banana'];
        [firstFruit, secondFruit, thirdFruit] = fruit; // destructuring 

// *18.  why are array like Objects ?
// ans - Arrat like Objects are object that have indexed elements and a length property, like arrays but may not have all methids of array.
        // Ex.- arguments, string, HTML Collections.
//     i)  sum(1, 2, 3);
//         function sum(){
//                 console.log(arguments);
//                 console.log(arguments.length);
//                 console.log(arguments[0]);
//      }

//      ii) str = 'hello!';
//         console.log(str);         // hello!
//         console.log(str.length);  // 6
//         console.log(str[0]);      // h

//        iii)  var boxes = document.getElementsByClassName('main');
//              console.log(boxes.length);
//              console.log(boxes[0]);

// *19. convert array-like Object into an array. 
// ans - Array.from(), Spread operator(...), Array.prototype.slice.call().
        var aryLike = {0: 'a', 1: 'dgkj', 2: 'wifgwi'};
        console.log(typeof aryLike);

        a1 = Array.from(aryLike);
        console.log(typeof a1);

        // a2 = [...aryLike];
        // console.log( a2);
        // error ****** both *****
        // a3 = Array.prototype.slice.call(aryLike).
        // console.log( a3);

                                      
// 20. Break vs Continue ?
// ans - break stops execution and exit from the loop, continue stops execution of further code and start execution from start. 

// 21. function, types ?
// ans - reusable block of code.
        // Types ->  Named, Anonymous, Function Expression(named, anonymous), Arrow Function, IIFE, Callback Function, Higher-Order Function.
                // named , witnout name anonymous
                function add(x,y){
                        return x+y;
                }
                console.log(add(5,3));
                // arrow
                var sum = (x,y) => x+y;
                console.log(sum(3,6));
                // callback - passed as an argument to another function. 

// 22. how ,any ways we can pass argument ?
// ans - add(3,4) -> positional argument
        //named argument , argument object

// 23.Events - click, mouseover, keydown/up, submit, focus, blur, change, load, resize.

// 24. Pure and impure function ?
// ans - Pure - produce same outpur for the same input, can't modify state, can't have side-effects
        // impure - can produce different output for same input, can modift state, have side effect.

// 25. call, apply, bind ? 
// ans - control how funtion invokedand what context they operate in. provide a way to manipulate a 'this' value and pass arg to function. 
        // call -> invoke the function with a specific context and arg.
        // apply -> and array of arg
        // bind -> """" congtext.

// 26. template literal -> template string, for string interpolation and multiline string in js. 
                var s1 = "happy";
                var s2 = `hello ${s1} !`;  // string interpolation
                console.log(s2);  // hello happy !

                var multiline = ` 
                                this is 
                                multiline
                                string 
                                `;
                console.log(multiline);

// 27. methids of string -> substring(), substr(), replace(), search(), toLowerCase/UpperCase(), indexOf(), includes(), trim(), charAt(), valueOf()
                         // slice(), concat(), charCodeAt(), split(), match(), toString() .

// 28. **Strings are immutable .

// 29. throw -> used to pass the error message from the called function to the caller function. (Error - type, range, syntax, reference)

// 30. Swallowing - by catch block we caught error but didn't do something with it(print). !! log error properly.

// 31. check object property existance
// ans - "name" in person , person.hasOwnproperty("name") , person.name != undefined .

// 32. clone an object -> spread , Object.assign({}, Original_obj) (shallow copy) , JSON.parse(JSON.stringify(object)) ( deep copy );

// 33. Set Object -> collection of unique values, 

// 34. Map object -> advance vresion of object, key and value can be of any type, maintain order of pairs.

// 35. Event Delegation -> when u handle the event of parent, child event auto get handled .

// 36. Event bubbling -> from botton to top, stop by stopPropagation().

// 37. Event Cpaturing -> reverse of bubbling, top to bottom.                                                                     


        





























